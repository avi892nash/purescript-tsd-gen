name: Build and Publish ts-gen

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        architecture: [x86_64, arm64]
        exclude:
          - os: windows-latest
            architecture: arm64
          - os: ubuntu-latest
            architecture: arm64

    steps:
      - # We need a proper Git repository, but the checkout step will unpack a tarball instead of doing a clone
        # if the Git version is less than 2.18.
        name: "(Linux only) Install a newer version of Git"
        if: "contains(matrix.os, 'ubuntu-latest')"
        run: |
          . /etc/os-release
          echo deb http://deb.debian.org/debian "$VERSION_CODENAME"-backports main >> /etc/apt/sources.list
          apt-get update && apt-get install -y git/"$VERSION_CODENAME"-backports

      - # We need `gh` installed on the Linux version. Otherwise, release artifacts won't be uploaded.
        name: "(Linux only) Install gh"
        if: "contains(matrix.os, 'ubuntu-latest')"
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update
          apt-get install gh

      - uses: actions/checkout@v2
      - uses: "actions/setup-node@v2"
        with:
          node-version: "16"

      - id: "haskell"
        name: "(Non-Linux only) Install Haskell"
        uses: "haskell/actions/setup@v1"
        with:
          enable-stack: true
          stack-version: "${{ env.STACK_VERSION }}"
          stack-no-global: true
      - name: Build Binary
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            stack build --copy-bins --local-bin-path ./dist
            mv ./dist/ts-gen.exe ./ts-gen-win.exe
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            if [ "${{ matrix.architecture }}" == "x86_64" ]; then
              stack build --copy-bins --local-bin-path ./dist
              mv ./dist/ts-gen ./ts-gen-macos-x86_64
            else
              stack build --copy-bins --local-bin-path ./dist
              mv ./dist/ts-gen ./ts-gen-macos-arm64
            fi
          else
            stack build --copy-bins --local-bin-path ./dist
            mv ./dist/ts-gen ./ts-gen-linux
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.architecture }}-binary
          path: ts-gen-*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-x86_64-binary
          path: ./releases/
     
      - uses: actions/download-artifact@v2
        with:
          name: macos-latest-x86_64-binary
          path: ./releases/
       
      - uses: actions/download-artifact@v2
        with:
          name: macos-latest-arm64-binary
          path: ./releases/
       
      - uses: actions/download-artifact@v2
        with:
          name: windows-latest-x86_64-binary
          path: ./releases/

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm version ${{ github.ref_name }}
          npm publish